[{"D:\\programming\\Reactivities\\client-app\\src\\index.tsx":"1","D:\\programming\\Reactivities\\client-app\\src\\serviceWorker.ts":"2","D:\\programming\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"3","D:\\programming\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"4","D:\\programming\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx":"5","D:\\programming\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx":"6","D:\\programming\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"7","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"8","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"9","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"10","D:\\programming\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"11","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"12","D:\\programming\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"13","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx":"14","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx":"15","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx":"16","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx":"17","D:\\programming\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"18","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"19","D:\\programming\\Reactivities\\client-app\\src\\reportWebVitals.ts":"20","D:\\programming\\Reactivities\\client-app\\src\\app\\stores\\store.ts":"21","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityFilters.tsx":"22"},{"size":800,"mtime":1613248244094,"results":"23","hashOfConfig":"24"},{"size":5201,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":256,"mtime":1577482138865,"results":"26","hashOfConfig":"24"},{"size":1518,"mtime":1613242748061,"results":"27","hashOfConfig":"24"},{"size":551,"mtime":1577649166037,"results":"28","hashOfConfig":"24"},{"size":979,"mtime":1613242725058,"results":"29","hashOfConfig":"24"},{"size":781,"mtime":1613242148132,"results":"30","hashOfConfig":"24"},{"size":1147,"mtime":1613248179758,"results":"31","hashOfConfig":"24"},{"size":1353,"mtime":1613243837258,"results":"32","hashOfConfig":"24"},{"size":2442,"mtime":1613238734298,"results":"33","hashOfConfig":"24"},{"size":3850,"mtime":1613243251555,"results":"34","hashOfConfig":"24"},{"size":757,"mtime":1613246255919,"results":"35","hashOfConfig":"24"},{"size":381,"mtime":1613232334794,"results":"36","hashOfConfig":"24"},{"size":1911,"mtime":1613247544062,"results":"37","hashOfConfig":"24"},{"size":1661,"mtime":1613247570472,"results":"38","hashOfConfig":"24"},{"size":2436,"mtime":1613247617703,"results":"39","hashOfConfig":"24"},{"size":2411,"mtime":1613247587254,"results":"40","hashOfConfig":"24"},{"size":2064,"mtime":1613231917354,"results":"41","hashOfConfig":"24"},{"size":1435,"mtime":1613247119665,"results":"42","hashOfConfig":"24"},{"size":438,"mtime":1613214840397,"results":"43","hashOfConfig":"24"},{"size":357,"mtime":1613235876952,"results":"44","hashOfConfig":"24"},{"size":1028,"mtime":1613248067985,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lzckhc",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},"D:\\programming\\Reactivities\\client-app\\src\\index.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\serviceWorker.ts",[],"D:\\programming\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],["97","98"],"D:\\programming\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",["99","100"],"import React, { useEffect, useState } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport  ActivityList from '../dashboard/ActivityList';\r\nimport { observer } from 'mobx-react-lite';\r\nimport  LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n    \r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n\t},  [activityRegistry.size, loadActivities]);\r\n\r\n\r\n\tif (activityStore.loadingInitial) return <LoadingComponent content='Loading activities...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={ 10 }>\r\n                <ActivityList />               \r\n            </Grid.Column>\r\n            <Grid.Column width={ 6 }>\r\n               <ActivityFilters/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDashboard); ","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",["101","102","103","104","105","106","107","108","109","110"],"import React, { useState, FormEvent, useContext, useEffect } from \"react\";\r\nimport { Segment, Form, Button, Grid } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\n//import { v4 as uuid } from \"uuid\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport ActivityStore from \"../../../app/stores/activityStore\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n//import { Form as FinalForm, Field } from \"react-final-form\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\n\r\n/*\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history\r\n}) => {\r\n  const activityStore = useContext(ActivityStore);\r\n\r\n  const {\r\n    createActivity,\r\n    editActivity,\r\n    submitting,\r\n    loadActivity,\r\n    clearActivity,\r\n    activity: initialFormState\r\n  } = activityStore;\r\n\r\n  const [activity, setActivity] = useState<Activity>({\r\n    id: \"\",\r\n    title: \"\",\r\n    category: \"\",\r\n    description: \"\",\r\n    date: \"\",\r\n    city: \"\",\r\n    venue: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (match.params.id && activity.id.length === 0) {\r\n      loadActivity(match.params.id).then(\r\n        () => initialFormState && setActivity(initialFormState)\r\n      );\r\n    }\r\n\r\n    return () => {\r\n      clearActivity();\r\n    };\r\n  }, [\r\n    loadActivity,\r\n    clearActivity,\r\n    match.params.id,\r\n    initialFormState,\r\n    activity.id.length\r\n  ]);\r\n\r\n  /*\r\n  const handleSubmit = () => {\r\n    if (activity.id.length === 0) {\r\n      let newActivity = {\r\n        ...activity,\r\n        id: uuid()\r\n      };\r\n\r\n      createActivity(newActivity).then(() =>\r\n        history.push(`/activities/${newActivity.id}`)\r\n      );\r\n    } else {\r\n      editActivity(activity).then(() =>\r\n        history.push(`/activities/${activity.id}`)\r\n      );\r\n    }\r\n  };\r\n  \r\n\r\n  const handleFinalFormSubmit = (values: any) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const handleInputChange = (\r\n    event: FormEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value } = event.currentTarget;\r\n    setActivity({ ...activity, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <Segment clearing>         \r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n*/\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history\r\n}) => {\r\n\r\n  return (\r\n    <></>\r\n  );\r\n}\r\nexport default observer(ActivityForm);\r\n\r\n","D:\\programming\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",["111","112","113"],"import { observable, action, computed, configure, runInAction, makeAutoObservable } from \"mobx\";\r\nimport { Activity } from \"../models/activity\";\r\nimport agent from \"../api/agent\";\r\nimport {format} from 'date-fns';\r\n\r\nexport default class ActivityStore {\r\n  activityRegistry = new Map<string, Activity>();\r\n  selectedActivity: Activity | undefined = undefined;\r\n  editMode = false;\r\n  loading = false;\r\n  loadingInitial = false;  \r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get activitiesByDate() {\r\n    return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n        a.date!.getTime() - b.date!.getTime());\r\n  }\r\n\r\n  get groupedActivities() {\r\n    return Object.entries(\r\n        this.activitiesByDate.reduce((activities, activity) => {\r\n            const date = format(activity.date!, 'dd MMM yyyy');\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n            return activities;\r\n        }, {} as {[key: string]: Activity[]})\r\n    )\r\n  }\r\n\r\n  /*\r\n  groupActivitiesByDate(activities: Activity[]) {\r\n    const sortedActivities = activities.sort(\r\n      (a, b) => Date.parse(a.date) - Date.parse(b.date)\r\n    );\r\n    return Object.entries(\r\n      sortedActivities.reduce((activities, activity) => {\r\n        const date = activity.date.split(\"T\")[0];\r\n        activities[date] = activities[date]\r\n          ? [...activities[date], activity]\r\n          : [activity];\r\n\r\n        return activities;\r\n      }, {} as { [key: string]: Activity[] })\r\n    );\r\n  }\r\n  */\r\n\r\n  /*\r\n  @action loadActivities = async () => {\r\n    this.loadingInitial = true;\r\n\r\n    try {\r\n      const activities = await agent.Activities.list();\r\n\r\n      runInAction(() => {\r\n        activities.forEach(activity => {\r\n          activity.date = activity.date.split(\".\")[0];\r\n          this.activityRegistry.set(activity.id, activity);\r\n        });\r\n        this.loadingInitial = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingInitial = false;\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n  */\r\n\r\n  loadActivities = async () => {\r\n    this.loadingInitial = true;\r\n    try {\r\n        const result = await agent.Activities.list();\r\n        result.forEach(activity => {\r\n          this.setActivity(activity);\r\n        })\r\n        this.setLoadingInitial(false);\r\n    } catch (error) {\r\n        console.log(error);\r\n        this.setLoadingInitial(false);\r\n    }\r\n  }\r\n\r\n  loadActivity = async (id: string) => {\r\n    let activity = this.getActivity(id);\r\n    if (activity) {\r\n      this.selectedActivity = activity;\r\n      return activity;\r\n    } else {\r\n      this.loadingInitial = true;\r\n      try {\r\n        activity = await agent.Activities.details(id);\r\n        this.setActivity(activity);\r\n        runInAction(() => {\r\n            this.selectedActivity = activity;\r\n        })\r\n        this.setLoadingInitial(false);\r\n        return activity;\r\n      \r\n      } catch (error) {        \r\n        console.log(error);\r\n        this.setLoadingInitial(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  setLoadingInitial = (state: boolean) => {\r\n    this.loadingInitial = state;\r\n  }\r\n\r\n  clearSelectedActivity = () => {\r\n    this.selectedActivity = undefined;\r\n  }\r\n\r\n  private setActivity = (activity: Activity) => {\r\n    activity.date = new Date(activity.date!);\r\n    this.activityRegistry.set(activity.id, activity);\r\n  }\r\n\r\n  private getActivity = (id: string) => {\r\n    return this.activityRegistry.get(id);\r\n  }\r\n\r\n  @action createActivity = async (activity: Activity) => {\r\n   \r\n    try {\r\n      await agent.Activities.create(activity);\r\n      runInAction(() => {\r\n        this.activityRegistry.set(activity.id, activity);\r\n       \r\n      });\r\n    } catch (error) {      \r\n      console.log(error);\r\n    }\r\n  };\r\n}\r\n\r\n//export default createContext(new ActivityStore());\r\n","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx",[],"D:\\programming\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["114"],"import axios, { AxiosResponse } from \"axios\";\r\nimport { Activity } from \"../models/activity\";\r\nimport { history } from \"../..\";\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000/api\";\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n  if (error.message === \"Network Error\" && !error.response) {\r\n    toast.error(\"Network error - make sure to start server\");\r\n  }\r\n  const { status, data, config } = error.response;\r\n  if (status === 404) {\r\n    history.push(\"/notfound\");\r\n  }\r\n  if (\r\n    status === 400 &&\r\n    config.method === \"get\" &&\r\n    data.errors.hasOwnProperty(\"id\")\r\n  ) {\r\n    history.push(\"/notfound\");\r\n  }\r\n\r\n  if (status === 500) {\r\n    toast.error(\"Server error - check terminal window for more info\");\r\n  }\r\n});\r\n\r\nconst responseBody  = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay)\r\n  })\r\n}\r\n\r\naxios.interceptors.response.use(async response => {\r\n  try {\r\n    await sleep(1000);\r\n    return response;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return await Promise.reject(error);\r\n  }\r\n})\r\n\r\nconst requests = {\r\n  get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n  put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  del: <T> (url: string) => axios.delete<T>(url).then(responseBody)\r\n};\r\n\r\nconst activitiesController = \"/activities\";\r\n\r\nconst Activities = {\r\n  list: () => requests.get<Activity[]>(activitiesController),\r\n  details: (id: string) => requests.get<Activity>(`${activitiesController}/${id}`),\r\n  create: (activity: Activity) =>\r\n    requests.post<Activity>(activitiesController, activity),\r\n  update: (activity: Activity) =>\r\n    requests.put<Activity>(`${activitiesController}/${activity.id}`, activity),\r\n  delete: (id: string) => requests.del<Activity>(`${activitiesController}/${id}`)\r\n};\r\n\r\nexport default { Activities };\r\n","D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",["115"],"import React from \"react\";\r\nimport { Item, Button, Segment, Icon } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n        <Item.Group>\r\n          <Item>\r\n            <Item.Image size='tiny' circular src='/assets/user.png' />\r\n            <Item.Content>\r\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                {activity.title}\r\n              </Item.Header>\r\n              <Item.Description>Hosted by Bob</Item.Description>\r\n            </Item.Content>\r\n          </Item>\r\n        </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n          <span>\r\n              <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n              <Icon name='marker' /> {activity.venue}\r\n          </span>\r\n      </Segment>\r\n      <Segment secondary>Attendees will go here</Segment>\r\n      <Segment clearing>\r\n        <span>{activity.description}</span>\r\n        <Button\r\n          as={Link}\r\n          to={`/activities/${activity.id}`}\r\n          floated='right'\r\n          content='View'\r\n          color='teal'\r\n        />\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n}\r\n\r\n\r\n","D:\\programming\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"D:\\programming\\Reactivities\\client-app\\src\\app\\stores\\store.ts",[],"D:\\programming\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityFilters.tsx",["116"],"import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    \r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activites'                  \r\n                   \r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                  \r\n                   \r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"                   \r\n                   \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar                \r\n                value={ new Date()}\r\n            />\r\n        </>\r\n    )\r\n})",{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":13,"column":12,"nodeType":"123","messageId":"124","endLine":13,"endColumn":23},{"ruleId":"121","severity":1,"message":"125","line":13,"column":25,"nodeType":"123","messageId":"124","endLine":13,"endColumn":39},{"ruleId":"121","severity":1,"message":"126","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"127","line":1,"column":27,"nodeType":"123","messageId":"124","endLine":1,"endColumn":36},{"ruleId":"121","severity":1,"message":"128","line":1,"column":38,"nodeType":"123","messageId":"124","endLine":1,"endColumn":48},{"ruleId":"121","severity":1,"message":"129","line":1,"column":50,"nodeType":"123","messageId":"124","endLine":1,"endColumn":59},{"ruleId":"121","severity":1,"message":"130","line":2,"column":10,"nodeType":"123","messageId":"124","endLine":2,"endColumn":17},{"ruleId":"121","severity":1,"message":"131","line":2,"column":19,"nodeType":"123","messageId":"124","endLine":2,"endColumn":23},{"ruleId":"121","severity":1,"message":"132","line":2,"column":25,"nodeType":"123","messageId":"124","endLine":2,"endColumn":31},{"ruleId":"121","severity":1,"message":"133","line":2,"column":33,"nodeType":"123","messageId":"124","endLine":2,"endColumn":37},{"ruleId":"121","severity":1,"message":"134","line":3,"column":10,"nodeType":"123","messageId":"124","endLine":3,"endColumn":18},{"ruleId":"121","severity":1,"message":"135","line":6,"column":8,"nodeType":"123","messageId":"124","endLine":6,"endColumn":21},{"ruleId":"121","severity":1,"message":"136","line":1,"column":10,"nodeType":"123","messageId":"124","endLine":1,"endColumn":20},{"ruleId":"121","severity":1,"message":"137","line":1,"column":30,"nodeType":"123","messageId":"124","endLine":1,"endColumn":38},{"ruleId":"121","severity":1,"message":"138","line":1,"column":40,"nodeType":"123","messageId":"124","endLine":1,"endColumn":49},{"ruleId":"139","severity":1,"message":"140","line":66,"column":1,"nodeType":"141","endLine":66,"endColumn":31},{"ruleId":"121","severity":1,"message":"142","line":5,"column":10,"nodeType":"123","messageId":"124","endLine":5,"endColumn":18},{"ruleId":"121","severity":1,"message":"143","line":5,"column":10,"nodeType":"123","messageId":"124","endLine":5,"endColumn":18},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"@typescript-eslint/no-unused-vars","'loadingNext' is assigned a value but never used.","Identifier","unusedVar","'setLoadingNext' is assigned a value but never used.","'useState' is defined but never used.","'FormEvent' is defined but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","'Segment' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'Activity' is defined but never used.","'ActivityStore' is defined but never used.","'observable' is defined but never used.","'computed' is defined but never used.","'configure' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'observer' is defined but never used.","'useStore' is defined but never used.","no-global-assign","no-unsafe-negation"]